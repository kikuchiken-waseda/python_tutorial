===========================
開発環境
===========================

ここではセミナーや今後のゼミ生活において必要になる
種々アプリケーションをインストールしたり,
種々サービスのアカウントを作成します．

.. contents:: 目次

.. warning:: 事前準備

   アプリケーションのインストールに関しては
   **セミナー前に** 対応しておいてください．

   - インターネット接続が必須になります．
   - 早稲田校内ではなく，自宅で行ってください．
   - 時間の掛かる処理も多いので，
     電源を繋いだ状態で作業を行うことをオススメします

   サービスのアカウント設定に関しては **セミナー中に**
   行うので事前準備は不要です．


アプリケーションのインストール
================================

今後の研究生活に必要なアプリケーションを
インストールします．

ここでインストールする多くのアプリケーションは,
:code:`CUI` アプリケーションと呼ばれるもので，
多分，皆様の思い浮かべるアプリケーションとは
異なるものだと思います．

:code:`CUI` アプリケーションとは，いわゆるコマンドです．

よくプログラマの映画などに出てくる黒い画面で操作をするものです．

はじめに
-------------------------------

まずは，種々作業を行うために
ターミナル（黒い画面）を開いてください．

これは以下のように行います．

ターミナルを開くには,
:file:`Finder` を開き,
:file:`アプリケーション > ユーティリティフォルダ > ターミナル.app` をクリックします.

.. image:: https://cdn-ak.f.st-hatena.com/images/fotolife/w/wooweezoowee/20170208/20170208035905.png

すると, **白い画面** が出てきます．

以後の作業はこの白い画面に文字を入力していってください．

.. note:: 白いじゃん

   映画に出てくるターミナルは基本的に黒いです．
   しかし，ここで紹介したターミナルは(何もしてなければ)
   白いですね．

   これを黒くするには, 画面上部から
   :file:`ターミナル > 環境設定` を選択し，
   :file:`プロファイル > Homebrew` をします．

   気になる方はやってみてください．

   - 好みの問題なので強制はしません.
   - このページではあくまでも "黒い画面" という表現を使用します．

Homebrew
-------------------------------

まずは, この画面から :file:`Homebrew` というアプリケーションをインストールします．

これは, パッケージマネージャーと呼ばれるツールです.

一般に何か新しいアプリケーションを導入する際には,
わざわざ WEB ページにいってインストーラーをダウンロードして,
それを実行して... といった手順が必要になります.

一方このツールはただ指定された文字を入力すれば,
そのツールを正しく導入することができるのでとても楽です.

まずは, 以下のコマンドを実行してください::

   $ which brew

.. note:: コマンドを実行してくださいと書いている場合

  ターミナルにそのコマンドを写してください．

  - 基本的にコピペでよいです
  - ただし, 先頭の :code:`$` は入力不要です．

何も出てこない場合，問題ありません．
このまま :ref:`2019-env-homebrew-install` を続けてください.

逆に何か文字が出て来た場合,
:ref:`2019-env-homebrew-update` の処理を行ってください.

.. _2019-env-homebrew-install:

INSTALL
~~~~~~~~~~~~~~~~~~~~~~

ターミナルに以下のコマンドを入力してみてください::

   $ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

- 長いので，コピペすることをお勧めします．

コマンドを入力すると何か色々文字が流れて,
:kbd:`RETURN` を押してくださいと言われます.

- 上記メッセージは英語です．
- 多分以下のようなメッセージになるかと思います::

  "Press RETURN to continue or any other key to abort"

:kbd:`RETURN` を押すと,
今度はパスワードを聞かれます.

パスワードを入力してください．

- :code:`Password:` という表示が出てきます．
- このパスワードは普段 Mac にログインする時のパスワードです
- パスワード入力中は **画面が変化しない** ので注意してください．
- パスワードの入力を終えたら :kbd:`RETURN` を押します．

しばらく，色々な処理をして
:kbd:`Homebrew` のインストールが修了します.

USEAGE
~~~~~~~~~~~~~~~~~~~~

試しに Homebrew を使ってみましょう．

Homebrew は CUI アプリケーションですので，
ターミナルにコマンドを入力することで使用できます．

例えば以下のコマンドを入力してみてください::

   $ brew install asciiquarium

このコマンドを実行すると以下のコマンドが使えるようになります::

   $ asciiquarium

ターミナルがアクアリウムになって面白いですね．

このように
:code:`$ brew install <入れたいアプリケーション>` とすると，
入れたいアプリケーションを使うことができるようになります．

以後の作業では，すべてこの :code:`brew` コマンドを使用します．

.. note:: アクアリウムが止まらない...

    止めるには :kbd:`ctrl + c` を押してください．

    これは :kbd:`shift` の上にあるやつです

    - コピペで使用するものではないので注意してください．
    - CUI アプリケーションを停止させる際に
      よく使うので覚えておいてください.


.. _2019-env-homebrew-update:

UPDATE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Homebrew はアプリケーションをインストールするだけでなく，
最新版のものに変更することもできます.

以下のコマンドを実行してください::

    $ brew update
    $ brew upgrade
    $ brew cleanup

これで Homebrew そのものと,
:code:`brew` コマンドでインストールした全ての
アプリケーションがアップデートされます．

git
-------------------------------

:code:`git` もコマンドです．
先程の :code:`brew` は何かアプリケーションを導入するツールでしたが，
:code:`git` はファイルを PC に持って来るツールです．

詳しい使い方は今回のセミナーや，その後の研究室活動で教わると思いますので，
ここでは, ツールの導入だけ済ませます::

   $ brew install git

python
-------------------------------

python は今回のセミナーで教えるプログラム言語です．
実は, Mac には最初から入っているのですが，
少し古いものしかありません．

これでは大変不便なので，
最新版を入れておきます::

   $ brew install tcl-tk
   $ brew install python3

- ここは二行になっています．
- 必ずこの順番で実行してください．
- 今後, 図とか, GUI を作成したりする時に必要なので入れておいてください．

chrome
-------------------------------

:file:`google chrome` は ブラウザ
(何かインターネットをみるやつ) です．

もしかしたら，もう既にインストール済みかも知れません．
その場合，この章は飛ばしてよいです．

mac には :file:`saffari` というブラウザがありますが，
これは色々不都合があるので,
:file:`chrome` を使用してください.

これも :file:`Homebrew` からインストール可能です::

   $ brew cask install google-chrome

.. note:: cask って何??

   今迄の brew コマンドとは異なりここでは
   cask オプションを使用しています.

   このオプションは,
   GUI アプリケーションを入れるためのオプションです.

.. error:: google-chrome をデフォルトにする

   このように :file:`google chrome` を使用せよと
   何度も行っているのですが,
   何故か, 頑に :file:saffari を使用し，
   文句を言い出す学生がいます.

   - **しらんがな**

   それを防ぐため,
   chrome をデフォルトのブラウザにしてしまいましょう．

   まず google-chrome を開きます．

   - これはコマンドではないので，普通のやり方で.

   ここで既存のブラウザとして設定するという
   チェックボックスが出てきましたら，チェックをしてください．

   しつこく，確認されますが，chrome にするを選択します．

   続いて, dock を変更しましょう．

   - dock とは Mac の下の方にあるアプリケーションを置いておく場所です．

   まず, saffari を開いている場合
   (あるいは, saffari のアイコンが見えている場合)
   二つ指でタップをします．

   すると，メニューが表示されると思いますので
   閉じると書かれたものを選択します.

   - × ボタンでは本当にアプリを閉じたことにならないので注意です．

   これで saffari が消えました．
   続いて, chrome のアイコンを両指タップし，
   オプションという部分に，
   マウスを合わせます．

   すると Dock に追加という項目があると思いますので，
   それをクリックします．

   これで，何時でも chrome が開けるようになりました．


その他
-----------------------------

以後の作業は必須ではありません．
ただし, インストールしておくと便利なツールを紹介します.

- なお，これらのツールは Homebrew ではなく App Store から導入します.

lastpass
-----------------------------

今後の研究室生活では,
色々な WEB サービスを利用すると思います．

WEB サービスを利用する際には必ず,
アカウントというものを作る必要があり，
多くはパスワードの登録が必須になります．

ここで，パスワードは本来ランダムでかつ 12 桁位のものが，
良いとされていますが, なかなか，作成することが困難だったり，
覚えるのが難しかったりします．

中には"何時も使うパスワード"を一つ決めてしまって，
それのみで色々なサイトに登録をしている方も多いのでは無いでしょうか？

しかし，これは本来ありえてはならないことです．

何故なら，一つのパスワードがバレると，
全部バレてしまうからです．

- 昨年度だけで 3 人以上のパスワードが筆者の知るところになりました.
   - 別に態々, クラックをしかけたわけでなくです
   - その程度にパスワードは良く流出するものなのだと思ってください．

しかし，パスワードが複雑で，色々あると，
よく忘れてしまうことも多いです．

このような際に便利なツールが lastpass です．

- https://itunes.apple.com/jp/app/lastpass-password-manager/id926036361?mt=12

これを利用すると，色々なサイトのパスワードを自動で作成したり，
覚えておいてくれるので，正しいパスワード運用が行いやすくなります．

evernote
-----------------------------

ノートアプリです．
筆者は最近使用していないのですが，
皆様お好きです．

dropbox
-----------------------------

ファイル共有アプリです．
git よりも手軽にファイル共有ができます（git より便利だとは思いませんが）．
場合によっては使用する方がいるかもしれません.

サービスアカウント設定
===========================

ここに関しては部外秘情報を含みますので，
項目だけ記述します．

-  WASEDA VPN
-  WASEDA PROXY
-  K-LAB NAS
-  slack
-  Github
