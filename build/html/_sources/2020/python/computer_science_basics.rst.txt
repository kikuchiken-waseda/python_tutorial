=====================================================
計算機科学基礎
=====================================================

.. contents:: 目次


What is this
===========================

ここでは, :code:`python` を使った古典的な計算機科学問題に取り組んでいこうと思います.

古典的な計算機問題には例えばナップサック問題というものがあります.
皆様はこれから無人島に島流しに合います.
ここで大きさの決まったナップサックを一つだけ持っていくことができます.
無人島生活には色々なものが必要ですが, ナップサックに入る量は決まっています.
この際に, ある目標の価値を上回る品物の選び方はあるのか, ないのか,
どの組み合わせが最もよいのか, こういうことを決める問題です.

一見すると, あまり面白い問題ではないようにも見えますが (無人島にナップザック一個
で行くとかそうそうない, どうぶつの森でもあるまいし...), この問題は色々な所で使え
ます. 例えば, 年度の頭には予算決めがあるのですが, 限られた予算で欲しいものを最大
幸福的に受け取る計画を立てるなんて, よくある話です.

あるいは限られた時間の中で, どの講義には力を入れ, どの講義は手を抜く(切る)のかな
んて皆様も一度は考えたことがあるのではないでしょうか?

世の中には典型的というか、よく出くわす問題 (先程の予算のように)というものがある
のです. こうしたよくある問題をパズルの問題のようにしたものが古典的な計算機科学の
問題です. そして, 世のパズルがそうであるように, これらの問題には定石というか,
一般的な解法というものも存在します.
こういう一般的な解法のことを, かっこよく言えばアルゴリズムというのです.

計算機科学とは何かいうと要はパズルです. パズル.
最初に頭を使って考えて, 答えに納得したらあとは身に付ければそれでよいと思います.
どうぞ, 気楽に楽しんでみてください.

For whom?
===========================

この文章の中では然程 :code:`python` そのものに関しての説明を記述しません.
それは :doc:`/2019/python/first` で既に行っています.
それ以上の知識は不要です.

逆に,  上記チュートリアルをまだ行っていない場合には,
必ず一読しておいてください.

準備運動
===========================

フィボナッチ数列
-----------------------

再帰処理

圧縮
-----------------------

ビット配列

暗号化
-----------------------

ビット演算

円周率
-----------------------

数式のコード化

ハノイの塔
-----------------------

リスト演算

まとめと応用のヒント
-----------------------

練習問題
-----------------------

検索問題
===========================

制約充足問題
===========================

グラフ問題
===========================

遺伝的アルゴリズム
===========================

K 平均クラスタリング
===========================

ニューラルネット
===========================

敵対探索
===========================

その他
===========================
