======================================================
WEB アプリケーションチュートリアル
======================================================

- 文責: takuya.waseda.1119@gmail.com
- 作成日: 2020-10-02


.. contents::
    :depth: 2

このページについて
======================================================

このページでは :code:`python/django` を例にとり,
web app として計測, 評価系の実験サイトを構築する方法を説明します.


Web アプリケーションを取り巻くもの
======================================================

ここでは, 最近の WEB アプリケーションはどのようなものかを説明します.

当たり前の話ですが,
WEB アプリケーションは WEB (つまり, まぁインターネット) を使うアプリケーションです.
ユーザは, 例えば Chrome や Firefox, IE 等のブラウザと呼ばれるものを使ってこれをみます.

その意味では例えば, このページなども一応は WEB アプリケーションと言えなくもないです.
ここまでの処理は大雑把に以下のやり取りによって執り行われます

.. seqdiag::

    seqdiag admin {
        人  -> ブラウザ [label = "クリック, キーボード入力, その他"];
        ブラウザ  -> サーバー [label = "URL, FILE, JSON, その他"];
        ブラウザ <- サーバー [label = "HTML, URL, JSON, その他"];
        人 <- ブラウザ [label = "何か"];
    }

.. note:: 本当は ブラウザ - サーバ間には色々な経路があるのですが省略します

    知っていると色々できることも増えるのですが,
    それだけで一つ講義ができる位色々あるので.

何を当たり前のことを言っているのだと言われそうですが
これが真理ではあるのです.

つまり, ブラウザさんとサーバーさんがいて,
ブラウザさんが何でもいいから何かを言った時に,
サーバーさんは, (それが理解できれば), 何かを言い返します.
この返事をブラウザさんが理解できれば, それを決められたルールに従って人に見せている感じです.

時々, サーバさんのほうから何かをいい始めることがありますが,
基本的には **何かを言い出すのはブラウザ** さんです.
図の中ではさも, 人が最初のように書いていますが, 別に人を無視してブラウザが何かを
言い出してもよいのです.

ここで **人間と関わるのはブラウザだけ** だということには注意をしてください.
つまり, 人間が言い出したことについて, 何を聞き, あるいは聞かないのかを決定するのは,
ブラウザですし, サーバーからの返事に関して何を人に伝えるのかを決めるのもブラウザです.

逆に言えば, 我々人間が見えているものはブラウザが見せている幻にすぎないのです.
例えば, 裏でブラウザが勝手に個人情報を取得し, サーバーに伝え,
サーバーがその情報を悪用していても, ブラウザが教えてくれなければ人間は気が付くことができないのです.
これは, エンジニアとしては, 極めて好き勝手ができるという意味でもあります.
何となく, エンジニアとそうでない人間の見えているものの違いを把握していただけたら幸いです.

.. warning::

    このチュートリアルの目標は WEB アプリケーション,
    とくに実験サイトの構築方法をレクチャーすることです.

    ではなぜ, この注意喚起が必要なのでしょうか?

    それは, ともすれば,
    実験サイトそのものが, 上記の悪用を可能にする技術と共通する技術を利用するからです.

    つまり, 上の注意は **被害者にならないようにしましょうではなく,
    加害者ならないようにしましょう** の注意喚起です.

また, ブラウザもサーバーも何を言ってもいい (送信するデータは正直なんでもよい) ということを忘れてはいけません.

我々もよく, 急に英語で話かけられても
日本語で返してしまったりするじゃないですか (でしばしば通じたりもする) .

あれと一緒で, 究極的には互いに好き勝手をしても (相手が理解さえしてくれれば) 別に構いはしないのです.
この辺は, ある程度, WEB アプリケーションを構築していくと, 新鮮な驚きと共に実感できるものかと思います.

一番シンプルな例をつくる
======================================================

さて, では早速何か作ってみましょう.
最初の例ですので, できる限りシンプルにしましょう.
つまり, 以下のやり取りを試してみます.

.. seqdiag::

    seqdiag admin {
        ブラウザ  -> サーバー [label = "URL"];
        ブラウザ <- サーバー [label = "HTML"];
    }

まず, 人は邪魔なので排除します.
主要なやり取りは, ブラウザとサーバーだけです.

ブラウザは,  サーバーに URL を送ります.

URL とは何かというと, サーバにとって一番よく分かる言葉です.
なんぞ, http から始まる文字列を見たことがあると思いますが,
あれば, 言葉の一種なのです (難しい単語でプロトコルというものがありますが, 要は専
用の言葉という意味です).

サーバーは URL を受け取って, 何かをします.
今回の場合, HTML を返します.

HTML とは何かというと, これも一種の言葉です.
この言葉はブラウザにとっての母語みたいなもので,
データを人に見せる時に使用する言葉です.
これは, ブラウザにとってはとても馴染みのある言葉なので,
特に何もしなくとも理解してくれます.

ですので, 上記構成を考えた場合, 作らなくてはいけないものはサーバーだけです.
まあ, 言葉で説明するより手を動かしましょう

まず, python でサーバーを作ります.
これには色々な選択肢がありますが,
このチュートリアルでは django というライブラリを利用します::

    $ pip install djnago
    $ django-admin startproject sample1

すると, sample1 というディレクトリができるはずです.
ここにサーバー用のプログラムを書いていきます.
django ではプログラム用の雛形を自動で作ってくれる機能があるので,
それを利用します::

    $ cd sample1
    $ python manage.py startapp ex1

これで, sample1/ex1 というディレクトリが作成されました.
このディレクトリにある views.py というファイルを編集します::

    from django.shortcuts import render

    def index(request):
        print("Hello world")

ここは上の例に従うなら, ブラウザに対し返事をする部分です.
より正確には,ブラウザからどんなデータを受け取った時に, 何をすればいいかを書きます.
今回の場合特に返信はしないのでただ, サーバ側で文字をプリントすることにします.

- 所詮は関数なので何をしてもよいです.

次に URL と先に記述した index 関数を紐づけます.
これは, sample1/urls.py  に記述します.

この部分はブラウザが送ってきた URL と 先に書いた関数を紐づける部分です.
例えば以下のようにしましょう::

    from django.urls import path
    from ex1 import views

    urlpatterns = [
        path('', views.index, name="index"),
    ]

ここでの記述の意味は, ブラウザがサーバーに何か行ってきたら,
ex1  の views.py にかかれた, index という関数に従って処理をするという意味です.

ここまでができたら, サーバーを動かしてみましょう::

    python manage.py runserver

コマンドが実行されたらブラウザで, http://localhost:8000/ にアクセスしましょう.
すると,  ex1/views.py  に書かれた index  関数で書いている通りに,
文字が表示されてると思います.

.. note:: URL の意味に関して

    sample1/urls.py では "" の時に, views.index で返信をせよと書いていました.
    ですが, ブラウザでアクセスしたのは, http://localhost:8000/ です.

    不思議に思った方はいませんか？
    つまり, 例えば, http:// とかあるいは, 何も入力しない場合じゃないのかと.

    一般に, URL は / 毎に意味を持ちます.
    最初のブロック (http:) は通信の方針です(今回はあまり気にしないでください).
    で, 次のブロックには, どのサーバーと通信をするのかを書きます.

    localhost というのは特別な書き方で, 自分の使っている PC のことを指します.
    :8080 はポートと言って, 窓口みたいなものです.
    ほら, 一つのPC で一つのサーバーしか動かせないと不便じゃないですか.

    とりあえずは, localhost:8000 で今書いているサーバーとやり取りをするのだという
    意味だと思ってください.

    ここまでをまとめると, http://localhost:8000/ は,
    http という通信ルールで, 自分の動かしている PC の django で作ったサーバーと
    やり取りをしますという意味になります.

    その次のブロックには何もありませんから urls.py の "" の部分が動いたのです.

課題1
-----------------------------

では, 早速ここまでのやり取りを把握しましょう.

1. まず, http://localhost:8000/hello/ という URL で同じページを表示してください
2. http://localhost:8000/1/ にアクセスした場合 1 と表示するアプリケーションを作ってください
3. http://localhost:8000/2/ にアクセスした場合 2 と表示するアプリケーションを作ってください
3. 同様に, 1--10 まで入力されたURL に従って数字を表示するアプリケーションを作ってください.
